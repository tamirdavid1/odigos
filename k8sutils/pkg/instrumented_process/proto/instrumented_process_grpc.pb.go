// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.1
// source: instrumented_process/proto/instrumented_process.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ProcessService_SendProcessStream_FullMethodName = "/proto.ProcessService/SendProcessStream"
)

// ProcessServiceClient is the client API for ProcessService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProcessServiceClient interface {
	SendProcessStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[InstrumentedProcessBatch, ProcessStreamResponse], error)
}

type processServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProcessServiceClient(cc grpc.ClientConnInterface) ProcessServiceClient {
	return &processServiceClient{cc}
}

func (c *processServiceClient) SendProcessStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[InstrumentedProcessBatch, ProcessStreamResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ProcessService_ServiceDesc.Streams[0], ProcessService_SendProcessStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[InstrumentedProcessBatch, ProcessStreamResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ProcessService_SendProcessStreamClient = grpc.BidiStreamingClient[InstrumentedProcessBatch, ProcessStreamResponse]

// ProcessServiceServer is the server API for ProcessService service.
// All implementations must embed UnimplementedProcessServiceServer
// for forward compatibility.
type ProcessServiceServer interface {
	SendProcessStream(grpc.BidiStreamingServer[InstrumentedProcessBatch, ProcessStreamResponse]) error
	mustEmbedUnimplementedProcessServiceServer()
}

// UnimplementedProcessServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProcessServiceServer struct{}

func (UnimplementedProcessServiceServer) SendProcessStream(grpc.BidiStreamingServer[InstrumentedProcessBatch, ProcessStreamResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SendProcessStream not implemented")
}
func (UnimplementedProcessServiceServer) mustEmbedUnimplementedProcessServiceServer() {}
func (UnimplementedProcessServiceServer) testEmbeddedByValue()                        {}

// UnsafeProcessServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProcessServiceServer will
// result in compilation errors.
type UnsafeProcessServiceServer interface {
	mustEmbedUnimplementedProcessServiceServer()
}

func RegisterProcessServiceServer(s grpc.ServiceRegistrar, srv ProcessServiceServer) {
	// If the following call pancis, it indicates UnimplementedProcessServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ProcessService_ServiceDesc, srv)
}

func _ProcessService_SendProcessStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ProcessServiceServer).SendProcessStream(&grpc.GenericServerStream[InstrumentedProcessBatch, ProcessStreamResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ProcessService_SendProcessStreamServer = grpc.BidiStreamingServer[InstrumentedProcessBatch, ProcessStreamResponse]

// ProcessService_ServiceDesc is the grpc.ServiceDesc for ProcessService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProcessService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ProcessService",
	HandlerType: (*ProcessServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendProcessStream",
			Handler:       _ProcessService_SendProcessStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "instrumented_process/proto/instrumented_process.proto",
}
