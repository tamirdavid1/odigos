// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.28.1
// source: instrumented_process/proto/instrumented_process.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type InstrumentedProcess struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	OdigletName          string                 `protobuf:"bytes,1,opt,name=odiglet_name,json=odigletName,proto3" json:"odiglet_name,omitempty"`                               // Agent/collector name
	K8SNodeName          string                 `protobuf:"bytes,2,opt,name=k8s_node_name,json=k8sNodeName,proto3" json:"k8s_node_name,omitempty"`                             // Kubernetes node
	WorkloadName         string                 `protobuf:"bytes,3,opt,name=workload_name,json=workloadName,proto3" json:"workload_name,omitempty"`                            // Kubernetes workload name
	WorkloadKind         string                 `protobuf:"bytes,4,opt,name=workload_kind,json=workloadKind,proto3" json:"workload_kind,omitempty"`                            // Kubernetes workload kind [Deployment/StatefulSet/DaemonSet]
	K8SPodName           string                 `protobuf:"bytes,5,opt,name=k8s_pod_name,json=k8sPodName,proto3" json:"k8s_pod_name,omitempty"`                                // Kubernetes pod name (PK)
	ProcessPid           int32                  `protobuf:"varint,6,opt,name=process_pid,json=processPid,proto3" json:"process_pid,omitempty"`                                 // Process ID inside the container (PK)
	K8SNamespaceName     string                 `protobuf:"bytes,7,opt,name=k8s_namespace_name,json=k8sNamespaceName,proto3" json:"k8s_namespace_name,omitempty"`              // Kubernetes namespace (PK)
	K8SContainerName     string                 `protobuf:"bytes,8,opt,name=k8s_container_name,json=k8sContainerName,proto3" json:"k8s_container_name,omitempty"`              // Container name inside the pod (PK)
	CreatedAt            *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`                                     // Timestamp when the process was detected (PK)
	TelemetrySdkLanguage string                 `protobuf:"bytes,10,opt,name=telemetry_sdk_language,json=telemetrySdkLanguage,proto3" json:"telemetry_sdk_language,omitempty"` // Language of the telemetry SDK
	ServiceInstanceId    string                 `protobuf:"bytes,11,opt,name=service_instance_id,json=serviceInstanceId,proto3" json:"service_instance_id,omitempty"`          // Service instance identifier
	Healthy              bool                   `protobuf:"varint,12,opt,name=healthy,proto3" json:"healthy,omitempty"`                                                        // Process health status
	HealthyReason        string                 `protobuf:"bytes,13,opt,name=healthy_reason,json=healthyReason,proto3" json:"healthy_reason,omitempty"`                        // Reason for health status (optional)
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *InstrumentedProcess) Reset() {
	*x = InstrumentedProcess{}
	mi := &file_instrumented_process_proto_instrumented_process_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InstrumentedProcess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstrumentedProcess) ProtoMessage() {}

func (x *InstrumentedProcess) ProtoReflect() protoreflect.Message {
	mi := &file_instrumented_process_proto_instrumented_process_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstrumentedProcess.ProtoReflect.Descriptor instead.
func (*InstrumentedProcess) Descriptor() ([]byte, []int) {
	return file_instrumented_process_proto_instrumented_process_proto_rawDescGZIP(), []int{0}
}

func (x *InstrumentedProcess) GetOdigletName() string {
	if x != nil {
		return x.OdigletName
	}
	return ""
}

func (x *InstrumentedProcess) GetK8SNodeName() string {
	if x != nil {
		return x.K8SNodeName
	}
	return ""
}

func (x *InstrumentedProcess) GetWorkloadName() string {
	if x != nil {
		return x.WorkloadName
	}
	return ""
}

func (x *InstrumentedProcess) GetWorkloadKind() string {
	if x != nil {
		return x.WorkloadKind
	}
	return ""
}

func (x *InstrumentedProcess) GetK8SPodName() string {
	if x != nil {
		return x.K8SPodName
	}
	return ""
}

func (x *InstrumentedProcess) GetProcessPid() int32 {
	if x != nil {
		return x.ProcessPid
	}
	return 0
}

func (x *InstrumentedProcess) GetK8SNamespaceName() string {
	if x != nil {
		return x.K8SNamespaceName
	}
	return ""
}

func (x *InstrumentedProcess) GetK8SContainerName() string {
	if x != nil {
		return x.K8SContainerName
	}
	return ""
}

func (x *InstrumentedProcess) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *InstrumentedProcess) GetTelemetrySdkLanguage() string {
	if x != nil {
		return x.TelemetrySdkLanguage
	}
	return ""
}

func (x *InstrumentedProcess) GetServiceInstanceId() string {
	if x != nil {
		return x.ServiceInstanceId
	}
	return ""
}

func (x *InstrumentedProcess) GetHealthy() bool {
	if x != nil {
		return x.Healthy
	}
	return false
}

func (x *InstrumentedProcess) GetHealthyReason() string {
	if x != nil {
		return x.HealthyReason
	}
	return ""
}

type InstrumentedProcessBatch struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Processes     []*InstrumentedProcess `protobuf:"bytes,1,rep,name=processes,proto3" json:"processes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InstrumentedProcessBatch) Reset() {
	*x = InstrumentedProcessBatch{}
	mi := &file_instrumented_process_proto_instrumented_process_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InstrumentedProcessBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstrumentedProcessBatch) ProtoMessage() {}

func (x *InstrumentedProcessBatch) ProtoReflect() protoreflect.Message {
	mi := &file_instrumented_process_proto_instrumented_process_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstrumentedProcessBatch.ProtoReflect.Descriptor instead.
func (*InstrumentedProcessBatch) Descriptor() ([]byte, []int) {
	return file_instrumented_process_proto_instrumented_process_proto_rawDescGZIP(), []int{1}
}

func (x *InstrumentedProcessBatch) GetProcesses() []*InstrumentedProcess {
	if x != nil {
		return x.Processes
	}
	return nil
}

type ProcessStreamResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Status         string                 `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`                                        // e.g., "received", "saved", "error"
	Message        string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`                                      // Optional: Details like "Saved to DB"
	ProcessedCount int32                  `protobuf:"varint,3,opt,name=processed_count,json=processedCount,proto3" json:"processed_count,omitempty"` // Number of processes successfully saved
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ProcessStreamResponse) Reset() {
	*x = ProcessStreamResponse{}
	mi := &file_instrumented_process_proto_instrumented_process_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProcessStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessStreamResponse) ProtoMessage() {}

func (x *ProcessStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_instrumented_process_proto_instrumented_process_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessStreamResponse.ProtoReflect.Descriptor instead.
func (*ProcessStreamResponse) Descriptor() ([]byte, []int) {
	return file_instrumented_process_proto_instrumented_process_proto_rawDescGZIP(), []int{2}
}

func (x *ProcessStreamResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ProcessStreamResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ProcessStreamResponse) GetProcessedCount() int32 {
	if x != nil {
		return x.ProcessedCount
	}
	return 0
}

var File_instrumented_process_proto_instrumented_process_proto protoreflect.FileDescriptor

var file_instrumented_process_proto_instrumented_process_proto_rawDesc = string([]byte{
	0x0a, 0x35, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x69, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xa7, 0x04, 0x0a, 0x13, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x64, 0x69, 0x67, 0x6c,
	0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f,
	0x64, 0x69, 0x67, 0x6c, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6b, 0x38,
	0x73, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x6b, 0x38, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x5f,
	0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x6f, 0x72, 0x6b,
	0x6c, 0x6f, 0x61, 0x64, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x6b, 0x38, 0x73, 0x5f,
	0x70, 0x6f, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6b, 0x38, 0x73, 0x50, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x50, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x6b,
	0x38, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6b, 0x38, 0x73, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x6b, 0x38, 0x73,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6b, 0x38, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f,
	0x73, 0x64, 0x6b, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x14, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x53, 0x64, 0x6b,
	0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x68, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x5f, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x68, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x79, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x54, 0x0a, 0x18, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x38, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x22,
	0x72, 0x0a, 0x15, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x32, 0x68, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x56, 0x0a, 0x11, 0x53, 0x65, 0x6e, 0x64, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x1f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x42, 0x61, 0x74, 0x63, 0x68, 0x1a, 0x1c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30, 0x01, 0x42, 0x4b, 0x5a,
	0x49, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x64, 0x69, 0x67,
	0x6f, 0x73, 0x2d, 0x69, 0x6f, 0x2f, 0x6f, 0x64, 0x69, 0x67, 0x6f, 0x73, 0x2f, 0x6b, 0x38, 0x73,
	0x75, 0x74, 0x69, 0x6c, 0x73, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
})

var (
	file_instrumented_process_proto_instrumented_process_proto_rawDescOnce sync.Once
	file_instrumented_process_proto_instrumented_process_proto_rawDescData []byte
)

func file_instrumented_process_proto_instrumented_process_proto_rawDescGZIP() []byte {
	file_instrumented_process_proto_instrumented_process_proto_rawDescOnce.Do(func() {
		file_instrumented_process_proto_instrumented_process_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_instrumented_process_proto_instrumented_process_proto_rawDesc), len(file_instrumented_process_proto_instrumented_process_proto_rawDesc)))
	})
	return file_instrumented_process_proto_instrumented_process_proto_rawDescData
}

var file_instrumented_process_proto_instrumented_process_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_instrumented_process_proto_instrumented_process_proto_goTypes = []any{
	(*InstrumentedProcess)(nil),      // 0: proto.InstrumentedProcess
	(*InstrumentedProcessBatch)(nil), // 1: proto.InstrumentedProcessBatch
	(*ProcessStreamResponse)(nil),    // 2: proto.ProcessStreamResponse
	(*timestamppb.Timestamp)(nil),    // 3: google.protobuf.Timestamp
}
var file_instrumented_process_proto_instrumented_process_proto_depIdxs = []int32{
	3, // 0: proto.InstrumentedProcess.created_at:type_name -> google.protobuf.Timestamp
	0, // 1: proto.InstrumentedProcessBatch.processes:type_name -> proto.InstrumentedProcess
	1, // 2: proto.ProcessService.SendProcessStream:input_type -> proto.InstrumentedProcessBatch
	2, // 3: proto.ProcessService.SendProcessStream:output_type -> proto.ProcessStreamResponse
	3, // [3:4] is the sub-list for method output_type
	2, // [2:3] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_instrumented_process_proto_instrumented_process_proto_init() }
func file_instrumented_process_proto_instrumented_process_proto_init() {
	if File_instrumented_process_proto_instrumented_process_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_instrumented_process_proto_instrumented_process_proto_rawDesc), len(file_instrumented_process_proto_instrumented_process_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_instrumented_process_proto_instrumented_process_proto_goTypes,
		DependencyIndexes: file_instrumented_process_proto_instrumented_process_proto_depIdxs,
		MessageInfos:      file_instrumented_process_proto_instrumented_process_proto_msgTypes,
	}.Build()
	File_instrumented_process_proto_instrumented_process_proto = out.File
	file_instrumented_process_proto_instrumented_process_proto_goTypes = nil
	file_instrumented_process_proto_instrumented_process_proto_depIdxs = nil
}
